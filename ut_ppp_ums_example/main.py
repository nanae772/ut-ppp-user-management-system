import enum


class データベース:
    pass


class メッセージバス:
    pass


class ユーザ型(enum.Enum):
    顧客 = enum.auto()
    従業員 = enum.auto()


class ユーザ:
    def __init__(self, ユーザid: int, Eメール: str, タイプ: ユーザ型):
        self.ユーザId = ユーザid
        self.Eメール = Eメール
        self.タイプ = タイプ

    def Eメールを変更(self, ユーザid: int, 新しいEメール: str):
        ユーザデータ = データベース.ユーザidでユーザを取得(ユーザid)
        self.ユーザId = ユーザid
        self.Eメール = ユーザデータ[1]
        self.タイプ = ユーザデータ[2]

        if self.Eメール == 新しいEメール:
            return

        会社のデータ = データベース.会社を取得()
        会社のドメイン名 = 会社のデータ[0]
        従業員の数 = 会社のデータ[1]

        メールドメイン = 新しいEメール.split("@")[1]
        メールが会社のドメインである = メールドメイン == 会社のドメイン名
        新しいタイプ = (
            ユーザ型.従業員 if メールが会社のドメインである else ユーザ型.顧客
        )

        if self.タイプ != 新しいタイプ:
            差分 = 1 if 新しいタイプ == ユーザ型.従業員 else -1
            新しい従業員数 = 従業員の数 + 差分
            データベース.会社情報を保存(新しい従業員数)

        self.Eメール = 新しいEメール
        self.タイプ = 新しいタイプ

        データベース.ユーザ情報を保存(self)
        メッセージバス.Eメール変更メッセージを送信(self.ユーザId, 新しいEメール)
