import enum


class データベース:
    pass


class メッセージバス:
    pass


class ユーザ型(enum.Enum):
    顧客 = enum.auto()
    従業員 = enum.auto()


class ユーザ:
    def __init__(self, ユーザid: int, Eメール: str, タイプ: ユーザ型):
        self.ユーザId = ユーザid
        self.メールアドレス = Eメール
        self.タイプ = タイプ

    def メールアドレスを変更(
        self, 新メールアドレス: str, 会社のドメイン名: str, 従業員数: int
    ) -> int:
        if self.メールアドレス == 新メールアドレス:
            return

        メールドメイン = 新メールアドレス.split("@")[1]
        メールが会社のドメインである = メールドメイン == 会社のドメイン名
        新しいタイプ = (
            ユーザ型.従業員 if メールが会社のドメインである else ユーザ型.顧客
        )

        新しい従業員数 = 従業員数

        if self.タイプ != 新しいタイプ:
            差分 = 1 if 新しいタイプ == ユーザ型.従業員 else -1
            新しい従業員数 += 差分

        self.メールアドレス = 新メールアドレス
        self.タイプ = 新しいタイプ

        return 新しい従業員数


class ユーザコントローラ:
    def __init__(self):
        self._データベース = データベース()
        self._メッセージバス = メッセージバス()

    def メールアドレスを変更(self, ユーザid: int, 新メールアドレス: str):
        ユーザデータ = self._データベース.idでユーザを取得(ユーザid)
        メールアドレス = ユーザデータ[1]
        タイプ = ユーザデータ[2]
        aユーザ = ユーザ(ユーザid, メールアドレス, タイプ)

        会社データ = self._データベース.会社を取得()
        会社のドメイン名 = 会社データ[0]
        従業員数 = 会社データ[1]

        新従業員数 = aユーザ.メールアドレスを変更(
            新メールアドレス, 会社のドメイン名, 従業員数
        )

        self._データベース.会社情報を保存(新従業員数)
        self._データベース.ユーザ情報を保存(aユーザ)
        self._メッセージバス.メールアドレス変更メッセージを送信(
            ユーザid, 新メールアドレス
        )
